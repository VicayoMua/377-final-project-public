#ifndef __MY_MALLOC_H
#define __MY_MALLOC_H

#include "diskmallo"
//#include "stdexcept"

//void assert(bool _bool, char *_message) {
//    if (_bool) return;
//    throw std::runtime_error(_message);
//}

// Some important constants.
//#define HEAP_SIZE 4096
#define MAGIC 0xDEADBEEF


class PageManager {
private:
    // This struct is used as the header of an allocated block.
    typedef struct __header_t {
        size_t size;  // the number of bytes of allocated memory
        unsigned int
                magic;  // the magic number used to identify a valid allocated block
    } header_t;

    // This struct is used for the free list.
    typedef struct __node_t {
        size_t size;            // the number of bytes available in this free block
        struct __node_t *next;  // a pointer to the next free list node
    } node_t;

    // Semaphor to keep the class thread safe
    sem_t page_sem;
    // A pointer to the head of the free list.
    node_t *pageHead;
    size_t totalPageSize;

    // Finds a node on the free list that has enough available memory to allocate to a calling program.
    void _findFreeNode(size_t size, node_t **found, node_t **previous);

    // Splits a found free node to accommodate an allocation request.
    void _splitFreeNode(size_t size, node_t **previous, node_t **free_block, header_t **allocated);

    // Merges adjacent nodes on the free list to reduce external fragmentation.
    void _coalesceFreeNodes(node_t *free_block);

public:
    // Constructor
    PageManager(void *page_memory, size_t page_size);

    // Deconstructor
    ~PageManager();

    // Reallocates the heap.
    void resetPage();

    // Calculates the amount of free memory available in the heap.
    size_t availableSizeTotal();

    // Returns the number of nodes on the free list.
    int freeNodesNumber();

    // Prints the free list. Useful for debugging purposes.
    void printFreeNodes();

    // Returns a pointer to a region of memory having at least the request `size` bytes.
    void *allocatePage(size_t size, char *null_terminating);

    // Frees a given region of memory back to the free list.
    bool freePage(void *allocated);
};

// Definitions to simplify semaphore operations
#define lock_pg_sem ::sem_wait(&this->page_sem)
#define unlock_pg_sem ::sem_post(&this->page_sem)

// Constructor
PageManager::PageManager(void *page_memory, size_t page_size) {
    // This allocates the heap and initializes the head node.
    this->pageHead = (node_t *) page_memory;
    this->totalPageSize = page_size;
    this->pageHead->size = page_size - sizeof(node_t);
    this->pageHead->next = NULL;
    // Initialize Semaphore
    ::sem_init(&this->page_sem, 0, 1);
}

// Deconstructor
PageManager::~PageManager() {
    // Destroying the semaphore
    ::sem_destroy(&this->page_sem);
}

// Reallocates the heap.
void PageManager::resetPage() {
    lock_pg_sem;
    ::memset(this->pageHead, 0, this->totalPageSize);
    this->pageHead->size = this->totalPageSize - sizeof(node_t);
    this->pageHead->next = NULL;
    unlock_pg_sem;
}

// Calculates the amount of free memory available in the heap.
size_t PageManager::availableSizeTotal() {
    size_t n = 0;
    lock_pg_sem;
    node_t *p = this->pageHead;
    while (p != NULL) {
        n += p->size;
        p = p->next;
    }
    unlock_pg_sem;
    return n;
}

// Returns the number of nodes on the free list.
int PageManager::freeNodesNumber() {
    int count = 0;
    lock_pg_sem;
    node_t *p = this->pageHead;
    while (p != NULL) {
        count++;
        p = p->next;
    }
    unlock_pg_sem;
    return count;
}

// Prints the free list. Useful for debugging purposes.
void PageManager::printFreeNodes() {
    lock_pg_sem;
    node_t *p = this->pageHead;
    while (p != NULL) {
        ::printf("Free(%zd)", p->size);
        p = p->next;
        if (p != NULL) {
            ::printf("->");
        }
    }
    ::printf("\n");
    unlock_pg_sem;
}

// Finds a node on the free list that has enough available memory to allocate to a calling program.
// This helper function should not be protected by semaphores.
void PageManager::_findFreeNode(size_t size, node_t **found, node_t **previous) {
    if (!found || !previous)
        return;
    *found = NULL;
    *previous = NULL;
    node_t *prev = NULL, *now = this->pageHead;
    while (now) {
        if (now->size + sizeof(node_t) >= size + sizeof(header_t)) {
            *found = now;
            *previous = prev;
            break;
        }
        prev = now;
        now = now->next;
    }
}

// Splits a found free node to accommodate an allocation request.
// This helper function should not be protected by semaphores.
void PageManager::_splitFreeNode(size_t size, node_t **previous, node_t **free_block, header_t **allocated) {
    if (!previous || !free_block || !allocated)
        return;
    if ((*free_block)->size >= size + sizeof(header_t)) {
        node_t *nn = (node_t *) ((char *) (*free_block) + sizeof(header_t) + size);
        size_t oldsize = (*free_block)->size;
        node_t *oldnext = (*free_block)->next;
        nn->size = oldsize - sizeof(header_t) - size;
        nn->next = oldnext;
        if (*previous) {
            (*previous)->next = nn;
        } else { // *free_block == head
            this->pageHead = nn;
        }
        *allocated = (header_t *) (*free_block);
        (*allocated)->size = size;
        (*allocated)->magic = MAGIC;
    } else {
        if (*previous) {
            (*previous)->next = (*free_block)->next;
        } else { // *free_block == head
            this->pageHead = (*free_block)->next;
        }
        *allocated = (header_t *) (*free_block);
        (*allocated)->size = (*free_block)->size + sizeof(node_t) - sizeof(header_t);
        (*allocated)->magic = MAGIC;
    }
}

// Returns a pointer to a region of memory having at least the request `size` bytes.
void *PageManager::allocatePage(size_t size, char* null_terminating) {
    node_t *prev = NULL, *found = NULL;
    lock_pg_sem;
    this->_findFreeNode(size, &found, &prev);
    if (!found) {
        unlock_pg_sem;
        return NULL;
    }
    header_t *alloc = NULL;
    this->_splitFreeNode(size, &prev, &found, &alloc);
    unlock_pg_sem;
    char *data_address = (char *) (alloc) + sizeof(header_t);
    ::memcpy(data_address, null_terminating, ::strlen(null_terminating));
    return data_address;
}

#define h_physi_next_p ((char *) h + sizeof(node_t) + h->size)
#define h_next_p ((char *) (h->next))

// Merges adjacent nodes on the free list to reduce external fragmentation.
// This helper function should not be protected by semaphores.
void PageManager::_coalesceFreeNodes(node_t *free_block) {
    if (!free_block) return;
    for (node_t *h = free_block; h; h = h->next) {
        while (h->next && h_next_p == h_physi_next_p) {
            h->size += sizeof(node_t) + h->next->size;
            h->next = h->next->next;
        }
    }
}

// Frees a given region of memory back to the free list.
bool PageManager::freePage(void *allocated) {
    lock_pg_sem;
    if (!allocated) {
        unlock_pg_sem;
        return false;
    }
    header_t *allochead = (header_t *) ((char *) allocated - sizeof(header_t));
    if (allochead->magic != MAGIC) {
        unlock_pg_sem;
        return false;
    }
    node_t *freehead = (node_t *) allochead;
    freehead->size = allochead->size + sizeof(header_t) - sizeof(node_t);
    if ((unsigned long) freehead < (unsigned long) this->pageHead) {
        freehead->next = this->pageHead;
        this->pageHead = freehead;
    } else {
        node_t *prev = this->pageHead, *now = prev->next;
        while (now != NULL && (unsigned long) freehead > (unsigned long) now) {
            prev = now;
            now = now->next;
        }
        prev->next = freehead;
        freehead->next = now;
    }
    this->_coalesceFreeNodes(this->pageHead);
    unlock_pg_sem;
    return true;
}

#endif