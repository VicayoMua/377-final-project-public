//
// Created by Vicayo Chang on 11/15/2023.
//

#ifndef VIRTUALMEMORYMANAGER_DISKMNO_H
#define VIRTUALMEMORYMANAGER_DISKMNO_H

/*
 * DiskMemory is thread dangerous without any protections of mutual exclusion.
 * Plus, most implementations are not atomic, so mutex is needed where this class is used!
 * DiskMemory represents the information returned possibly by DiskVirtualMemoryManager.
 * This implementation uses nullptr rather than NULL.
 * */
class DiskMemory {
private:
    void *_void_p;
    size_t _size;
public:
    /*
     * constructor
     * */
    DiskMemory();

    DiskMemory(void *pointer, size_t block_size);

    /*
     * getPointer() returns memory address of the beginning
     * */
    void *pointer();

    /*
     * getSize() returns the size of the memory from the beginning
     * */
    size_t size();

    /*
     * syncToDisk() returns a bool whether the content is successfully immediately synced to disk.
     * */
    bool syncToDisk(bool if_wait_for_completion);
};

DiskMemory::DiskMemory(void *pointer, size_t block_size) {
    this->_void_p = pointer;
    this->_size = block_size;
}

DiskMemory::DiskMemory() {
    this->_void_p = nullptr;
    this->_size = 0;
}

/*
 * getPointer() returns memory address of the beginning
 * */
void *DiskMemory::pointer() {
    return this->_void_p;
}

/*
 * getSize() returns the size of the memory from the beginning
 * */
size_t DiskMemory::size() {
    return this->_size;
}

bool DiskMemory::syncToDisk(bool if_wait_for_completion) {
//    return (
//            (if_wait_for_completion ?
//             ::msync(this->_void_p, this->_size, MS_SYNC) :
//             ::msync(this->_void_p, this->_size, MS_ASYNC)) != -1
//    );
    if (::msync(this->_void_p, this->_size, (if_wait_for_completion ? MS_SYNC : MS_ASYNC)) == -1) {
        ::perror("DiskMemory.syncToDisk: Failed to synchronize the virtual memory file content onto the disk! \n");
        return false;
    }
    return true;

}

#endif //VIRTUALMEMORYMANAGER_DISKMNO_H
