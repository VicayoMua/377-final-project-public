//
// Created by vicay on 11/14/2023.
//

#ifndef VIRTUALMEMORYMANAGER_SIMPLESTACK_H
#define VIRTUALMEMORYMANAGER_SIMPLESTACK_H

// CPP headers
#include "stdexcept"

/*
 * SimpleStack is thread dangerous without protections of any mutual exclusion.
 * Plus, most implementations are not atomic, so mutex is needed where this class is used!
 * This implementation uses nullptr rather than NULL.
 * The basic data structure is linked list.
 * */
template<typename T>
class SimpleStack {
private:
    /*
     * SimpleStackNode represents each linked-list node used by SimpleStack.
     * */
    struct SimpleStackNode {
        T value;
        struct SimpleStackNode *next;
    };

    /*
     * stack_top marks logically the topic of the stack.
     * maintained by:
     *      constructor, deconstructor,
     *      isEmpty,
     *      push,
     *      pop
     * */
    struct SimpleStackNode *stack_top;
public:
    /*
     * constructor
     * */
    SimpleStack();

    /*
     * deconstructor
     * */
    ~SimpleStack();

    /*
     * isEmpty() return a bool if the stack is empty.
     * */
    bool isEmpty();

    /*
     * push(value) pushes value into the stack, placing new node at the top.
     * */
    void push(T &&value);

    void push(T &value);

    /*
     * pop() returns the value at the top of the stack and delete the top node.
     * */
    T pop();
};

// Constructor
template<typename T>
SimpleStack<T>::SimpleStack() {
    this->stack_top = nullptr;
}

// Destructor
template<typename T>
SimpleStack<T>::~SimpleStack() {
    while (!this->isEmpty()) {
        this->pop();
    }
}

// Check if the stack is empty
template<typename T>
bool SimpleStack<T>::isEmpty() {
    return this->stack_top == nullptr;
}

// Push a value onto the stack
template<typename T>
void SimpleStack<T>::push(T &&value) {
    auto *newNode = new SimpleStackNode;
    newNode->value = value;
    newNode->next = this->stack_top;
    this->stack_top = newNode;
}

template<typename T>
void SimpleStack<T>::push(T &value) {
    auto *newNode = new SimpleStackNode;
    newNode->value = value;
    newNode->next = this->stack_top;
    this->stack_top = newNode;
}

// Pop the top value from the stack
template<typename T>
T SimpleStack<T>::pop() {
    if (this->isEmpty()) {
        throw std::runtime_error("SimpleStack.pop: The stack is already empty, nothing to pop!");
    }
    T topValue = this->stack_top->value;
    SimpleStackNode *temp = this->stack_top;
    this->stack_top = this->stack_top->next;
    delete temp;
    return topValue;
}

#endif //VIRTUALMEMORYMANAGER_SIMPLESTACK_H
